#+TITLE: Emacs Configuration
#+AUTHOR: Dileban Karunamoorthy

Emacs configuration specified in [[https://en.wikipedia.org/wiki/Literate_programming][Literate Programming]] using Emacs Org mode.

* Dependency Management
** Define Package Repositories

List of default package repositories to search from.

#+BEGIN_SRC emacs-lisp
(require 'package)

(setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
			 ("marmalade" . "https://marmalade-repo.org/packages/")
			 ("melpa" . "https://melpa.org/packages/")))
#+END_SRC

** Import Package Install Utility

The function 'use-package' simplifies importing and configuring 
packages. Import packages "in-line" and configure at the same time, 
as opposed to separate these activities in two different parts of 
the file.

#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
#+END_SRC
** Try Package Before Installing

Utility for trying packages before installing.

#+BEGIN_SRC emacs-lisp
(use-package try
	:ensure t)
#+END_SRC
** Customizations

Save all custom-settings to a separate file

#+BEGIN_SRC emacs-lisp
(setq custom-file "~/.emacs.d/custom-settings.el")
(load custom-file t)
#+END_SRC
* Default Appearance
** Inhibit Startup Screen and Message

#+BEGIN_SRC emacs-lisp
(setq inhibit-splash-screen t)
(setq inhibit-startup-message t)
#+END_SRC
** Display Current Time

#+BEGIN_SRC emacs-lisp
(display-time-mode t)
#+END_SRC
** Tab Width

#+BEGIN_SRC emacs-lisp
(setq-default tab-width 3)
#+END_SRC
** Hide Tool Bar

#+BEGIN_SRC emacs-lisp
(tool-bar-mode 0)
#+END_SRC
** Hide Menu Bar

#+BEGIN_SRC emacs-lisp
(menu-bar-mode 0)
#+END_SRC

** Disable Scroll Bars

#+BEGIN_SRC emacs-lisp
(scroll-bar-mode 0)
#+END_SRC
** Theme

#+BEGIN_SRC emacs-lisp
(use-package solarized-theme
  :ensure t
  :config
  (load-theme 'solarized-dark)
)
#+END_SRC
* Key Management
** Assitance for key completions

[[https://github.com/justbur/emacs-which-key][which-key]] displays possible key-bindings for partially completed
commands.

#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :config
    (which-key-mode))
#+END_SRC
* Backup Settings
** Disable Backups and Auto-Saves

#+BEGIN_SRC emacs-lisp
(setq make-backup-files nil)
(setq auto-save-default nil)
#+END_SRC
* Buffer Management
** Preferred Coding System

Default all new buffers to the UTF-8 coding system.
Also applies to creating new files with C-x C-f.

#+BEGIN_SRC emacs-lisp
(prefer-coding-system 'utf-8)
#+END_SRC
** Killing Buffers

Kill current buffer without prompting for buffer name.

#+BEGIN_SRC emacs-lisp
(defun kill-current-buffer ()
  "Kills the current buffer."
  (interactive)
  (kill-buffer (current-buffer)))
(global-set-key (kbd "C-x k") 'kill-current-buffer)
#+END_SRC

** Enable 'ibuffers' by Default

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x C-b") 'ibuffer)
#+END_SRC
* Basic Editing
** Highlight Current Line

Highlights current line when using the windowing system. 
Not enabled for command line.

#+BEGIN_SRC emacs-lisp
(when window-system (add-hook 'prog-mode-hook 'hl-line-mode))
#+END_SRC
** Text Scrolling

Scroll text in current window one line at a time.

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-9") (lambda ()(interactive)(scroll-down 1)))
(global-set-key (kbd "C-0") (lambda ()(interactive)(scroll-up 1)))
#+END_SRC
** Moving Point Quickly Within Screen Area

Moves point quickly within the visible screen area.

#+BEGIN_SRC emacs-lisp
(use-package avy
   :ensure t
   :bind ("M-s" . avy-goto-char))
#+END_SRC
** Finding Stuff

Finding stuff includes searching text within buffers, as well as
finding buffers, files, and commonly used commands.

[[https://github.com/abo-abo/swiper][Swiper]] is a replacement for the default search, which shows a
convenient overview of all matches. 

#+BEGIN_SRC emacs-lisp
;; Commented out. Prefer using Helm Swoop instead.
;; (use-package swiper
;;  :ensure t
;;  :bind ("C-s" . swiper)
;;  :config)
#+END_SRC

[[https://github.com/ShingoFukuyama/helm-swoop][Helm Swoop]] is a replacement for the default search, which shows a 
convenient overview of all matches.

#+BEGIN_SRC emacs-lisp
(use-package helm-swoop
  :ensure t
  :bind ("C-s" . helm-swoop-without-pre-input)
  :config
  (define-key helm-swoop-map (kbd "C-r") 'helm-previous-line)
  (define-key helm-swoop-map (kbd "C-s") 'helm-next-line)
  (define-key helm-multi-swoop-map (kbd "C-r") 'helm-previous-line)
  (define-key helm-multi-swoop-map (kbd "C-s") 'helm-next-line)
  (setq helm-swoop-use-line-number-face t)
  (set-face-attribute 'helm-swoop-target-word-face nil 
      :weight 'bold
      :foreground "deep pink")
)
#+END_SRC

Ivy is a generic completion system for Emacs, while Counsel builds 
on Ivy to add completions to a number of commonly used emacs commands.
This enhances searchability of buffers, files, commands, functions, 
variables, etc.

#+BEGIN_SRC emacs-lisp
(use-package ivy
  :ensure t
  :config
  (ivy-mode 1))

(use-package counsel
  :ensure t
  :bind 
  (("M-y" . counsel-yank-pop)
    :map ivy-minibuffer-map
    ("M-y" . ivy-next-line)))
#+END_SRC

Override default bindings added by Counsel with Helm for M-x, finding
files, buffers, and bookmarks.

#+BEGIN_SRC emacs-lisp
(use-package helm
  :ensure t
  :bind 
  ("M-x" . helm-M-x)
  ("C-x C-f" . helm-find-files)
  ("C-x C-b" . helm-buffers-list)
  ("C-x b" . helm-buffers-list)
  ("C-x r b" . helm-bookmarks)
  :config
  (setq helm-autoresize-max-height 30
        helm-autoresize-min-height 30)
  (helm-autoresize-mode 1)
  (set-face-attribute 'helm-selection nil 
      :background "violet red"
      :foreground "white")
)
#+END_SRC
** Expand Region and Replace

Expand region and replace

#+BEGIN_SRC emacs-lisp
(use-package expand-region
  :ensure t
  :bind
  ("C-`" . er/expand-region)
  :config
  (pending-delete-mode t)
)
#+END_SRC
** Unfil Region

The reverse of fill-region. Useful when copying text from emacs to
other destinations.

#+BEGIN_SRC emacs-lisp
(use-package unfill
  :ensure t)
#+END_SRC
* Typesetting Systems
** Document Preparation with LaTex

Using AUCTeX for producing TeX based content, including LaTex,
requires a TeX system such as TeX Live. To acquire TeX Live for
Windows, download the installer from [[https://www.tug.org/texlive/acquire-netinstall.html][here]]. On Ubuntu, install
(texlive-full) from repositories.

Helpful links:

- [[https://tex.stackexchange.com/questions/50827/a-simpletons-guide-to-tex-workflow-with-emacs][A Simpleton Guide to TeX Workflow with Emacs]]
 

#+BEGIN_SRC emacs-lisp
(use-package auctex
  :ensure t
  :mode ("\\.tex\\'" . TeX-latex-mode)
)
#+END_SRC
** Org Mode

Styling orgmode, inspired by [[https://thraxys.wordpress.com/2016/01/14/pimp-up-your-org-agenda/][this]]. For a list of symbols see [[https://www.w3schools.com/charsets/ref_html_entities_4.asp][here]].

#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :ensure t
  :init
  (setq org-bullets-bullet-list
      '("◉" "●" "○" "▪" "▪"))
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
  (setq org-ellipsis " ▾")
)
#+END_SRC
* Programming
** General

[[https://github.com/flycheck/flycheck][Flycheck]] is a syntax checking extension that supports over 50 
languages.

#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :init (global-flycheck-mode))
#+END_SRC

[[https://github.com/joaotavora/yasnippet][yasnippet]] template system for convenient expansions.
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :ensure t
  :config
  (yas-global-mode t))
#+END_SRC

[[https://github.com/auto-complete/auto-complete][auto-complete]] enables auto-completion feature for various modes
in Emacs. 

#+BEGIN_SRC emacs-lisp
(use-package auto-complete
  :ensure t
  :init
  (progn 
     (ac-config-default))
)
#+END_SRC
** Working with Projects

[[https://github.com/bbatsov/projectile][Projectile]], a useful project interaction extension that makes working
with projects (e.g. any directory with .git) easy. 

#+BEGIN_SRC emacs-lisp
(use-package projectile
  :ensure t
  :init
    (projectile-mode 1)
  :config
  (setq projectile-completion-system 'helm)
  (define-key projectile-mode-map (kbd "M-p") 'projectile-command-map))
#+END_SRC

[[https://github.com/bbatsov/helm-projectile][helm-projectile]] is helm mode for projectile. 

#+BEGIN_SRC emacs-lisp
(use-package helm-projectile
  :ensure t
  :init
  (helm-projectile-on))
#+END_SRC
** Solidity

#+BEGIN_SRC emacs-lisp
(use-package solidity-mode
  :ensure t)
#+END_SRC
** Golang

Setup [[https://github.com/dominikh/go-mode.el][go-mode]] for editing Go code. In order to use go-mode effectively
install the following tools and ensure they are availalbe in the PATH:

+ [[https://godoc.org/golang.org/x/tools/cmd/goimports][goimports]]: =go get golang.org/x/tools/cmd/goimports=
+ [[https://github.com/rogpeppe/godef][godef]]: =go get github.com/rogpeppe/godef=
+ [[https://github.com/golang/lint][golint]]: =go get -u golang.org/x/lint/golint=
+ [[https://github.com/kisielk/errcheck][errcheck]]: =go get -u github.com/kisielk/errcheck=
+ [[https://godoc.org/golang.org/x/tools/cmd/guru][guru]]: =go get golang.org/x/tools/cmd/guru=

NOTE: Go imports relies on existence of the GNU `diff` util in PATH.

#+BEGIN_SRC emacs-lisp
(use-package go-mode
  :ensure t
  :bind
  ("M-." . godef-jump)
  :config
  (progn 
     (setq gofmt-command "goimports")     
     (add-hook 'before-save-hook 'gofmt-before-save))
)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package go-guru
  :ensure t)
#+END_SRC

To get auto complete working, install [[https://github.com/nsf/gocode][gocode]] along with 
[[https://github.com/auto-complete/auto-complete][auto-complete]] (see above) and [[https://github.com/nsf/gocode/tree/master/emacs][go-autocomplete]].

#+BEGIN_SRC emacs-lisp
(use-package go-autocomplete
  :ensure t)
#+END_SRC
* References

List of emacs configurations for inspiration

+ [[https://github.com/hrs/dotfiles/tree/master/emacs/.emacs.d][HRS]]
+ [[https://github.com/zamansky/using-emacs/blob/master/myinit.org][Mike Zamansky]]
+ [[https://github.com/daedreth/UncleDavesEmacs][Dawid Eckert (Uncle Dave)]]
+ [[https://github.com/munen/emacs.d][Alain M. Lafon (Munen)]]
+ [[https://github.com/bbatsov/emacs.d/blob/master/init.el][Bozhidar Batsov]]
+ [[https://github.com/jwiegley/dot-emacs/blob/master/init.el][John Wiegley]]
+ [[https://github.com/abo-abo/oremacs][Oleh Krehel (abo abo)]]
