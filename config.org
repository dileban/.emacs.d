#+TITLE: Emacs Configuration
#+AUTHOR: Dileban Karunamoorthy

Emacs configuration specified in [[https://en.wikipedia.org/wiki/Literate_programming][Literate Programming]] using Emacs Org mode.

* Dependency Management
** Define Package Repositories

List of default package repositories to search from.

#+BEGIN_SRC emacs-lisp
(require 'package)

(setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
			 ("marmalade" . "https://marmalade-repo.org/packages/")
			 ("melpa" . "https://melpa.org/packages/")))
#+END_SRC

** Import Package Install Utility

The function 'use-package' simplifies importing and configuring 
packages. Import packages "in-line" and configure at the same time, 
as opposed to separate these activities in two different parts of 
the file.

#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
#+END_SRC
** Try Package Before Installing

Utility for trying packages before installing.

#+BEGIN_SRC emacs-lisp
(use-package try
	:ensure t)
#+END_SRC
** Customizations

Save all custom-settings to a separate file

#+BEGIN_SRC emacs-lisp
(setq custom-file "~/.emacs.d/custom-settings.el")
(load custom-file t)
#+END_SRC
* Default Appearance
** Inhibit Startup Screen and Message

#+BEGIN_SRC emacs-lisp
(setq inhibit-splash-screen t)
(setq inhibit-startup-message t)
#+END_SRC
** Display Current Time

#+BEGIN_SRC emacs-lisp
(display-time-mode t)
#+END_SRC
** Hide Tool Bar

#+BEGIN_SRC emacs-lisp
(tool-bar-mode 0)
#+END_SRC
** Disable Scroll Bars

#+BEGIN_SRC emacs-lisp
(scroll-bar-mode 0)
#+END_SRC
** Theme

#+BEGIN_SRC emacs-lisp
(use-package solarized-theme
  :ensure t
  :config
  (load-theme 'solarized-dark)
)
#+END_SRC
* Backup Settings
** Disable Backups and Auto-Saves

#+BEGIN_SRC emacs-lisp
(setq make-backup-files nil)
(setq auto-save-default nil)
#+END_SRC
* Buffer Management
** Preferred Coding System

Default all new buffers to the UTF-8 coding system.
Also applies to creating new files with C-x C-f.

#+BEGIN_SRC emacs-lisp
(prefer-coding-system 'utf-8)
#+END_SRC
** Killing Buffers

Kill current buffer without prompting for buffer name.

#+BEGIN_SRC emacs-lisp
(defun kill-current-buffer ()
  "Kills the current buffer."
  (interactive)
  (kill-buffer (current-buffer)))
(global-set-key (kbd "C-x k") 'kill-current-buffer)
#+END_SRC

** Enable 'ibuffers' by Default

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x C-b") 'ibuffer)
#+END_SRC
* Basic Editing
** Highlight Current Line

Highlights current line when using the windowing system. 
Not enabled for command line.

#+BEGIN_SRC emacs-lisp
(when window-system (add-hook 'prog-mode-hook 'hl-line-mode))
#+END_SRC
** Text Scrolling

Scroll text in current window one line at a time.

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-9") (lambda ()(interactive)(scroll-down 1)))
(global-set-key (kbd "C-0") (lambda ()(interactive)(scroll-up 1)))
#+END_SRC
** Moving Point Quickly Within Screen Area

Moves point quickly within the visible screen area.

#+BEGIN_SRC emacs-lisp
(use-package avy
   :ensure t
   :bind ("M-s" . avy-goto-char))
#+END_SRC
** Finding Stuff

Finding stuff includes searching text within buffers, as well as
finding buffers, files, and commonly used commands.

[[https://github.com/abo-abo/swiper][Swiper]] is a replacement for the default search that shows an 
overview of all matches. 

#+BEGIN_SRC emacs-lisp
(use-package swiper
  :ensure t
  :bind ("C-s" . swiper)
  :config)
#+END_SRC

Ivy is a generic completion system for Emacs, while Counsel builds 
on Ivy to add completions to a number of commonly used emacs commands.
This enhances searchability of buffers, files, commands, functions, 
variables, etc.

#+BEGIN_SRC emacs-lisp
(use-package ivy
  :ensure t
  :config
  (ivy-mode 1))

(use-package counsel
  :ensure t
  :bind 
  (("M-y" . counsel-yank-pop)
    :map ivy-minibuffer-map
    ("M-y" . ivy-next-line)))
#+END_SRC

Override default bindings added by Counsel with Helm for M-x, finding
files and the buffer list.

#+BEGIN_SRC emacs-lisp
(use-package helm
  :ensure t
  :bind 
  ("M-x" . helm-M-x)
  ("C-x C-f" . helm-find-files)
  ("C-x C-b" . helm-buffers-list)
  :config
  (setq helm-autoresize-max-height 30
        helm-autoresize-min-height 30)
  (helm-autoresize-mode 1))
#+END_SRC
* Typesetting Systems
** Document Preparation with LaTex

Using AUCTeX for producing TeX based content, including LaTex,
requires a TeX system such as TeX Live. To acquire TeX Live for
Windows, download the installer from [[https://www.tug.org/texlive/acquire-netinstall.html][here]]. On Ubuntu, install
(texlive-full) from repositories.

Helpful links:

- [[https://tex.stackexchange.com/questions/50827/a-simpletons-guide-to-tex-workflow-with-emacs][A Simpleton Guide to TeX Workflow with Emacs]]
 

#+BEGIN_SRC emacs-lisp
(use-package auctex
  :ensure t
  :mode ("\\.tex\\'" . TeX-latex-mode)
)
#+END_SRC


